# -*- coding: utf-8 -*-
"""Match.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XKizHkhBYvqISyQlmzgEN3OW49fSgswN
"""

import logging
import streamlit as st
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder

# Suppress specific warnings
logging.getLogger("streamlit").setLevel(logging.ERROR)

# Define the main function for cricket match prediction
def cricket_match_prediction():
    st.title('Cricket Match Outcome Prediction')

    st.sidebar.header("User Inputs")

    # User inputs for cricket match features
    team_batting_average = st.sidebar.number_input('Team Batting Average', min_value=20, max_value=100, value=50)
    team_bowling_average = st.sidebar.number_input('Team Bowling Average', min_value=10, max_value=100, value=25)
    opposition_batting_average = st.sidebar.number_input('Opposition Batting Average', min_value=20, max_value=100, value=45)
    opposition_bowling_average = st.sidebar.number_input('Opposition Bowling Average', min_value=10, max_value=100, value=30)
    team_experience = st.sidebar.number_input('Team Experience (years)', min_value=1, max_value=20, value=5)

    # Create a DataFrame from the user inputs
    match_data = pd.DataFrame({
        'team_batting_average': [team_batting_average],
        'team_bowling_average': [team_bowling_average],
        'opposition_batting_average': [opposition_batting_average],
        'opposition_bowling_average': [opposition_bowling_average],
        'team_experience': [team_experience],
    })

    # Updated match outcome dataset (replace this with actual data)
    data = {
        'team_batting_average': [50, 55, 45, 60, 40, 52, 48, 49, 53, 50],
        'team_bowling_average': [25, 22, 28, 24, 30, 23, 26, 27, 29, 25],
        'opposition_batting_average': [45, 48, 50, 40, 44, 46, 45, 47, 49, 44],
        'opposition_bowling_average': [30, 27, 29, 31, 25, 28, 26, 30, 27, 29],
        'team_experience': [5, 7, 6, 8, 4, 7, 6, 5, 6, 4],
        'match_outcome': ['Win', 'Win', 'Loss', 'Win', 'Loss', 'Win', 'Win', 'Loss', 'Win', 'Loss'],
    }

    df = pd.DataFrame(data)

    # Encode categorical labels (Win / Loss)
    label_encoder = LabelEncoder()
    df['match_outcome'] = label_encoder.fit_transform(df['match_outcome'])  # Win = 1, Loss = 0

    # Features and target
    X = df.drop('match_outcome', axis=1)
    y = df['match_outcome']

    # Train a KNN classifier
    knn_classifier = KNeighborsClassifier(n_neighbors=3)
    knn_classifier.fit(X, y)

    # Button to trigger prediction
    if st.sidebar.button('Predict Match Outcome'):
        # Predict match outcome based on user input
        outcome_prediction = knn_classifier.predict(match_data)
        predicted_outcome = label_encoder.inverse_transform(outcome_prediction)

        # Display the result
        st.write(f"Predicted Match Outcome: {predicted_outcome[0]}")

# Run the cricket match prediction function
if __name__ == "__main__":
    cricket_match_prediction()



